---
import BaseLayout from './BaseLayout.astro'
import avatar from '../images/avatar.jpg'
import config from '../config'
---

<BaseLayout title={Astro.props.title ? `${Astro.props.title} | ${config.title}` : config.title}>
  <div>
    <div class="lg:flex home">
      <!-- PC -->
      <div class="sm:px-10 lg:mt-10 py-20 hidden-pc nav-view">
        <div class="sticky top-5 flex flex-col gap-4">
          <div class="w-32 h-32 bg-cover bg-center inline-block mx-auto">
            <img src={avatar.src} width={avatar.width} height={avatar.height} alt="头像" />
          </div>
          <div class="mediate">
            <h1 class="font-bold text-2xl">{config.name}</h1>
            <div class="theme-dark">
              <div class="flex">
                <div id="theme">
                  <i class="iconfont icon-sun"></i>
                </div>
                <span class="ml-3">{config.signature}</span>
              </div>
            </div>
          </div>

          <div class="flex lg:flex-col gap-4 mt-4 mx-auto nav-webfont">
            {
              config.navs.map((nav) => {
                const { pathname } = Astro.url
                const trimmedPathname = pathname === '/' ? pathname : pathname.replace(/\/$/, '')
                const isActive = trimmedPathname === nav.url
                return (
                  <a
                    href={nav.url}
                    class:list={isActive ? 'active' : ''}
                    rel={nav.url.startsWith('http') ? 'noopener' : undefined}
                  >
                    {nav.title}
                  </a>
                )
              })
            }
          </div>
          <div class="text-slate-500 text-sm mediate">
            Blog since {config.since}
          </div>
        </div>
      </div>

      <!-- Mobile-->
      <div class="sm:px-10 lg:mt-10 py-20 hidden-mobile mobile-menu opened">
        <div class="sticky top-5 flex flex-col gap-4">
          <div class="mediate">
            <div class="w-32 h-32 bg-cover bg-center inline-block mx-auto">
              <img src={avatar.src} width={avatar.width} height={avatar.height} alt="头像" />
            </div>
            <h1 class="font-bold text-2xl font-name">{config.name}</h1>
            <div class="theme-dark">
              <div class="flex">
                <div id="theme-mobile">
                  <i class="iconfont icon-sun"></i>
                </div>
                <span class="ml-3">{config.signature}</span>
              </div>
            </div>
          </div>
          <div class="flex lg:flex-col gap-4 mt-4 mx-auto nav-webfont">
            {
              config.navs.map((nav) => {
                const { pathname } = Astro.url
                const trimmedPathname = pathname === '/' ? pathname : pathname.replace(/\/$/, '')
                const isActive = trimmedPathname === nav.url
                return (
                  <a
                    href={nav.url}
                    class:list={isActive ? 'active' : ''}
                    rel={nav.url.startsWith('http') ? 'noopener' : undefined}
                  >
                    {nav.title}
                  </a>
                )
              })
            }
          </div>
          <div class="text-slate-500 text-sm mediate">
            Blog since {config.since}
          </div>
        </div>
      </div>

      <div class="toggle hidden-mobile header-navbar">
        <div class="toggle-menu" id="toggle"><i class="iconfont icon-menu"></i></div>
        <div class="header-slogan">斯是陋室，唯吾芳馨</div>
      </div>
      <div class="lg:mt-28 mx-4 lg:mx-0 pb-10 ml-52 md w-full container-main opened">
        <div class="container">
          <slot />
        </div>
      </div>

      <div class="pb-10 hidden-pc">
        <slot name="catalogue" />
      </div>
    </div>
  </div>
</BaseLayout>

<script>
  const toggleButton: HTMLElement | null = document.getElementById('toggle')
  const themeElement = document.getElementById('theme')
  const themeElementMobile = document.getElementById('theme-mobile')
  const mobileMenuSelector = '.mobile-menu'
  const containerMainSelector = '.container-main'
  const headerNavbarSelector = '.header-navbar'
  const themeClass = 'theme-dark'

  const toggleTheme = () => {
    const element = document.documentElement
    const isDark = element.getAttribute('data-theme') === 'dark'

    // Switch topic
    element.setAttribute('data-theme', isDark ? 'light' : 'light')

    // Save the theme selection to local storage
    localStorage.setItem('theme', isDark ? 'light' : 'light')
  }

  const handleToggleClick = () => {
    toggleTheme()

    // Update the ICONS and styles of theme switching elements
    const updateThemeIcon = (element: HTMLElement | null) => {
      // @ts-ignore
      const iconElement = element.querySelector('i')
      if (iconElement) {
        iconElement.classList.toggle('icon-sun')
        iconElement.classList.toggle('icon-moon')
      }
    }

    updateThemeIcon(themeElement)
    updateThemeIcon(themeElementMobile)
  }

  if (toggleButton) {
    toggleButton.addEventListener('click', () => {
      const mobileMenu = document.querySelector(mobileMenuSelector)
      const containerMain = document.querySelector(containerMainSelector)
      const headerNavbar = document.querySelector(headerNavbarSelector)

      // Toggle the opened class in the left sidebar and the right main area
      mobileMenu?.classList.toggle('opened-pc')
      containerMain?.classList.toggle('opened-mobile')
      headerNavbar?.classList.toggle('opened-mobile')
    })
  }

  // Set the theme when the page loads
  const theme = (() => {
    if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
      return localStorage.getItem('theme')
    }
    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
      return 'dark'
    }
    return 'light'
  })()

  // @ts-ignore
  document.documentElement.setAttribute('data-theme', theme)

  // Toggle event listening for the topic
  if (themeElement !== null) {
    themeElement.addEventListener('click', handleToggleClick)
  } else {
    console.error('未找到 ID 为 "theme" 的元素')
  }

  if (themeElementMobile !== null) {
    themeElementMobile.addEventListener('click', handleToggleClick)
  } else {
    console.error('未找到 ID 为 "theme" 的元素')
  }
</script>

<style>
  .nav-view {
    position: fixed;
    top: 0;
    order: 1;
    flex-shrink: 0;
    margin-right: 1.236rem;
  }

  .active {
    color: #0088f5;
  }

  .md {
    margin-left: 13rem;
    margin-right: 1rem;
  }

  a {
    text-decoration: underline;
  }

  /* 深色样式 */
  .theme-dark {
    color: #999;
    font-size: 16px;
    font-weight: 300;
    margin: 10px 0 5px;
  }
</style>
